public boolean isPalindrome(Nodo head) {
    if (head == null) return true;
    Nodo firstHalfEnd = endOfFirstHalf(head);
    Nodo secondHalfStart = reverseList(firstHalfEnd.siguiente);
    Nodo p1 = head;
    Nodo p2 = secondHalfStart;
    boolean result = true;
    while (result && p2 != null) {
        if (p1.valor != p2.valor) result = false;
        p1 = p1.siguiente; p2 = p2.siguiente;}        
    firstHalfEnd.siguiente = reverseList(secondHalfStart);
    return result;
}
private Nodo reverseList(Nodo head) {
    Nodo prev = null; Nodo curr = head;
    while (curr != null) {
        Nodo nextTemp = curr.siguiente;
        curr.siguiente = prev;
        prev = curr; curr = nextTemp;}
    return prev;
}
private Nodo endOfFirstHalf(Nodo head) {
    Nodo rapido = head; Nodo lento = head;
    while (rapido.siguiente != null && rapido.siguiente.siguiente != null) {
        rapido = rapido.siguiente.siguiente;
        lento = lento.siguiente;}
    return lento;
}

public class Nodo {
     int valor;
     Nodo siguiente;
     Nodo() {}
     Nodo(int valor) { this.valor = valor; }
     Nodo(int valor, Nodo siguiente) { this.valor = valor; this.siguiente = siguiente; }
 }